"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getRuntime = exports.app = exports.plexUploads = exports.msg = exports.port = exports.version = exports.name = void 0;
const config = require("config");
const express = require("express");
const bodyParser = require("body-parser");
const multer = require("multer");
const ping_1 = require("./controllers/ping");
const router = require("../lib/router");
const plex_1 = require("./controllers/plex");
/** name of the server */
exports.name = config.get('server.name');
/** version of the server */
exports.version = config.get('server.version');
/** port of the server */
exports.port = config.get('server.port');
/** server signature message */
exports.msg = {
    good: `${exports.name} v.${exports.version} listening at http://localhost:${exports.port}`,
};
/** Directory where multer puts its uploaded */
exports.plexUploads = config.get('plex.uploads');
const upload = multer({ dest: exports.plexUploads });
const runtime = Date.now();
/** Express application */
function app(preApp) {
    const app = preApp || express();
    // TODO: verify against multipart posts and remove the body parser if not needed
    // right now the bodyParser is here because of development testing using curl
    app.use(bodyParser.json());
    app.use(bodyParser.urlencoded({ extended: true }));
    const get = function (path, handler) {
        app.get(path, router.routeWrapper(handler));
    };
    const postMulti = function (path, handler) {
        app.post(path, upload.any(), router.routeWrapper(handler));
    };
    // SETUP ROUTES
    if (!preApp) {
        // only add ping if we are building our express app from scatch here
        get('/ping', ping_1.pingHandler);
    }
    postMulti('/plex', plex_1.plexHandler);
    return app;
}
exports.app = app;
/** time since application was initialized (in microseconds) */
function getRuntime() {
    return Date.now() - runtime;
}
exports.getRuntime = getRuntime;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VydmVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxpQ0FBaUM7QUFDakMsbUNBQW1DO0FBQ25DLDBDQUEwQztBQUMxQyxpQ0FBaUM7QUFFakMsNkNBQWlEO0FBQ2pELHdDQUF3QztBQUN4Qyw2Q0FBaUQ7QUFHakQseUJBQXlCO0FBQ1osUUFBQSxJQUFJLEdBQVcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0RCw0QkFBNEI7QUFDZixRQUFBLE9BQU8sR0FBVyxNQUFNLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLENBQUM7QUFDNUQseUJBQXlCO0FBQ1osUUFBQSxJQUFJLEdBQVcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztBQUN0RCwrQkFBK0I7QUFDbEIsUUFBQSxHQUFHLEdBQUc7SUFDakIsSUFBSSxFQUFFLEdBQUcsWUFBSSxNQUFNLGVBQU8sa0NBQWtDLFlBQUksRUFBRTtDQUNuRSxDQUFDO0FBRUYsK0NBQStDO0FBQ2xDLFFBQUEsV0FBVyxHQUFXLE1BQU0sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDOUQsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLEVBQUUsSUFBSSxFQUFFLG1CQUFXLEVBQUUsQ0FBQyxDQUFDO0FBRTdDLE1BQU0sT0FBTyxHQUFXLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUVuQywwQkFBMEI7QUFDMUIsU0FBZ0IsR0FBRyxDQUFDLE1BQXdCO0lBQzFDLE1BQU0sR0FBRyxHQUFvQixNQUFNLElBQUksT0FBTyxFQUFFLENBQUM7SUFDakQsZ0ZBQWdGO0lBQ2hGLDZFQUE2RTtJQUM3RSxHQUFHLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzNCLEdBQUcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDbkQsTUFBTSxHQUFHLEdBQUcsVUFBUyxJQUFZLEVBQUUsT0FBNEI7UUFDN0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlDLENBQUMsQ0FBQTtJQUNELE1BQU0sU0FBUyxHQUFHLFVBQVMsSUFBWSxFQUFFLE9BQTRCO1FBQ25FLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxHQUFHLEVBQUUsRUFBRSxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFBO0lBQ0QsZUFBZTtJQUNmLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDWCxvRUFBb0U7UUFDcEUsR0FBRyxDQUFDLE9BQU8sRUFBRSxrQkFBVyxDQUFDLENBQUM7S0FDM0I7SUFDRCxTQUFTLENBQUMsT0FBTyxFQUFFLGtCQUFXLENBQUMsQ0FBQztJQUNoQyxPQUFPLEdBQUcsQ0FBQztBQUNiLENBQUM7QUFuQkQsa0JBbUJDO0FBRUQsK0RBQStEO0FBQy9ELFNBQWdCLFVBQVU7SUFDeEIsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsT0FBTyxDQUFDO0FBQzlCLENBQUM7QUFGRCxnQ0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGJvZHlQYXJzZXIgZnJvbSAnYm9keS1wYXJzZXInO1xuaW1wb3J0ICogYXMgbXVsdGVyIGZyb20gJ211bHRlcic7XG5cbmltcG9ydCB7IHBpbmdIYW5kbGVyIH0gZnJvbSAnLi9jb250cm9sbGVycy9waW5nJztcbmltcG9ydCAqIGFzIHJvdXRlciBmcm9tICcuLi9saWIvcm91dGVyJztcbmltcG9ydCB7IHBsZXhIYW5kbGVyIH0gZnJvbSAnLi9jb250cm9sbGVycy9wbGV4JztcblxuXG4vKiogbmFtZSBvZiB0aGUgc2VydmVyICovXG5leHBvcnQgY29uc3QgbmFtZTogc3RyaW5nID0gY29uZmlnLmdldCgnc2VydmVyLm5hbWUnKTtcbi8qKiB2ZXJzaW9uIG9mIHRoZSBzZXJ2ZXIgKi9cbmV4cG9ydCBjb25zdCB2ZXJzaW9uOiBzdHJpbmcgPSBjb25maWcuZ2V0KCdzZXJ2ZXIudmVyc2lvbicpO1xuLyoqIHBvcnQgb2YgdGhlIHNlcnZlciAqL1xuZXhwb3J0IGNvbnN0IHBvcnQ6IG51bWJlciA9IGNvbmZpZy5nZXQoJ3NlcnZlci5wb3J0Jyk7XG4vKiogc2VydmVyIHNpZ25hdHVyZSBtZXNzYWdlICovXG5leHBvcnQgY29uc3QgbXNnID0ge1xuICBnb29kOiBgJHtuYW1lfSB2LiR7dmVyc2lvbn0gbGlzdGVuaW5nIGF0IGh0dHA6Ly9sb2NhbGhvc3Q6JHtwb3J0fWAsXG59O1xuXG4vKiogRGlyZWN0b3J5IHdoZXJlIG11bHRlciBwdXRzIGl0cyB1cGxvYWRlZCAqL1xuZXhwb3J0IGNvbnN0IHBsZXhVcGxvYWRzOiBzdHJpbmcgPSBjb25maWcuZ2V0KCdwbGV4LnVwbG9hZHMnKTtcbmNvbnN0IHVwbG9hZCA9IG11bHRlcih7IGRlc3Q6IHBsZXhVcGxvYWRzIH0pO1xuXG5jb25zdCBydW50aW1lOiBudW1iZXIgPSBEYXRlLm5vdygpO1xuXG4vKiogRXhwcmVzcyBhcHBsaWNhdGlvbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFwcChwcmVBcHA/OiBleHByZXNzLkV4cHJlc3MpOiBleHByZXNzLkV4cHJlc3Mge1xuICBjb25zdCBhcHA6IGV4cHJlc3MuRXhwcmVzcyA9IHByZUFwcCB8fCBleHByZXNzKCk7XG4gIC8vIFRPRE86IHZlcmlmeSBhZ2FpbnN0IG11bHRpcGFydCBwb3N0cyBhbmQgcmVtb3ZlIHRoZSBib2R5IHBhcnNlciBpZiBub3QgbmVlZGVkXG4gIC8vIHJpZ2h0IG5vdyB0aGUgYm9keVBhcnNlciBpcyBoZXJlIGJlY2F1c2Ugb2YgZGV2ZWxvcG1lbnQgdGVzdGluZyB1c2luZyBjdXJsXG4gIGFwcC51c2UoYm9keVBhcnNlci5qc29uKCkpO1xuICBhcHAudXNlKGJvZHlQYXJzZXIudXJsZW5jb2RlZCh7IGV4dGVuZGVkOiB0cnVlIH0pKTtcbiAgY29uc3QgZ2V0ID0gZnVuY3Rpb24ocGF0aDogc3RyaW5nLCBoYW5kbGVyOiByb3V0ZXIucm91dGVIYW5kbGVyKTogdm9pZCB7IFxuICAgIGFwcC5nZXQocGF0aCwgcm91dGVyLnJvdXRlV3JhcHBlcihoYW5kbGVyKSk7XG4gIH1cbiAgY29uc3QgcG9zdE11bHRpID0gZnVuY3Rpb24ocGF0aDogc3RyaW5nLCBoYW5kbGVyOiByb3V0ZXIucm91dGVIYW5kbGVyKTogdm9pZCB7XG4gICAgYXBwLnBvc3QocGF0aCwgdXBsb2FkLmFueSgpLCByb3V0ZXIucm91dGVXcmFwcGVyKGhhbmRsZXIpKTtcbiAgfVxuICAvLyBTRVRVUCBST1VURVNcbiAgaWYgKCFwcmVBcHApIHtcbiAgICAvLyBvbmx5IGFkZCBwaW5nIGlmIHdlIGFyZSBidWlsZGluZyBvdXIgZXhwcmVzcyBhcHAgZnJvbSBzY2F0Y2ggaGVyZVxuICAgIGdldCgnL3BpbmcnLCBwaW5nSGFuZGxlcik7XG4gIH1cbiAgcG9zdE11bHRpKCcvcGxleCcsIHBsZXhIYW5kbGVyKTtcbiAgcmV0dXJuIGFwcDtcbn1cblxuLyoqIHRpbWUgc2luY2UgYXBwbGljYXRpb24gd2FzIGluaXRpYWxpemVkIChpbiBtaWNyb3NlY29uZHMpICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UnVudGltZSgpOiBudW1iZXIge1xuICByZXR1cm4gRGF0ZS5ub3coKSAtIHJ1bnRpbWU7XG59XG4iXX0=