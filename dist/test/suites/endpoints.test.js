"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chai = require("chai");
const config = require("config");
const fs = require("fs-extra");
const request = require("supertest");
const testapp_1 = require("../utils/testapp");
const lib_1 = require("../../lib");
const assert = chai.assert;
describe('app setup', () => {
    const logdir = config.get('plex.logdir');
    const uploads = config.get('plex.uploads');
    beforeAll(() => {
        fs.emptyDirSync(logdir);
        fs.emptyDirSync(uploads);
    });
    let app;
    let latestFiles;
    it('app instance', async () => {
        app = await testapp_1.startApp();
        assert.exists(app);
        lib_1.PlexDispatcher.getInstance().register('media.play', async (payload, files) => {
            latestFiles = files;
            return;
        });
    });
    it('/ping route', async () => {
        const response = await request(app).get('/ping').expect(200);
        assert.exists(response, 'got a response');
        const body = response.body;
        assert.exists(body, 'got a response body');
        const { name, version, runtime } = body;
        assert.equal(name, 'plex-monitor', 'name matches');
        assert.equal(version, '0.1.0', 'version matches');
        assert.exists(runtime);
    });
    it('/plex route (200 OK, failure result)', async () => {
        const response = await request(app).post('/plex').expect(200);
        assert.exists(response, 'got a response result');
        const body = response.body;
        assert.exists(body, 'got a response body');
        assert.equal(body.status, 'failure', 'failure detected as expected');
        assert.equal(body.reason, 'invalid input', 'failure reason');
    });
    it('/plex route (200 OK, success result)', async () => {
        const plexRequest = {
            payload: JSON.stringify({
                event: 'media.play',
                mockdata: {
                    idea: 'I got nothin',
                },
            }),
        };
        const response = await request(app)
            .post('/plex')
            .send(plexRequest)
            .expect(200);
        assert.exists(response, 'got a response result');
        const body = response.body;
        assert.exists(body, 'got a response body');
        assert.equal(body.status, 'success', 'success detected as expected');
    });
    it('/plex route (200 OK, multi-part success)', async () => {
        const plexPayload = JSON.stringify({
            event: 'media.play',
            mockdata: {
                idea: 'I got nothin',
            },
        });
        const fileToSend = './test/fixtures/testimage.jpg';
        const fileStat = fs.statSync(fileToSend);
        const response = await request(app)
            .post('/plex')
            .field('payload', plexPayload)
            .attach('image1', fileToSend)
            .expect(200);
        assert.exists(response, 'got a response result');
        const body = response.body;
        assert.exists(body, 'got a response body');
        assert.equal(body.status, 'success', 'success detected as expected');
        const filesArray = latestFiles;
        assert.equal(filesArray.length, 1, 'one file uploaded');
        const uploadedFileStat = fs.statSync(filesArray[0].path);
        assert.equal(fileStat.size, uploadedFileStat.size, 'uploaded file size');
        assert.equal(filesArray[0].mimetype, 'image/jpeg', 'uploaded mime type');
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5kcG9pbnRzLnRlc3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi90ZXN0L3N1aXRlcy9lbmRwb2ludHMudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUE2QjtBQUM3QixpQ0FBaUM7QUFFakMsK0JBQStCO0FBQy9CLHFDQUFxQztBQUVyQyw4Q0FBNEM7QUFDNUMsbUNBQXNFO0FBRXRFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7QUFFM0IsUUFBUSxDQUFDLFdBQVcsRUFBRSxHQUFHLEVBQUU7SUFFekIsTUFBTSxNQUFNLEdBQVcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNqRCxNQUFNLE9BQU8sR0FBVyxNQUFNLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDO0lBRW5ELFNBQVMsQ0FBRSxHQUFHLEVBQUU7UUFDZCxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3hCLEVBQUUsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFFSCxJQUFJLEdBQW9CLENBQUM7SUFDekIsSUFBSSxXQUF3QixDQUFDO0lBQzdCLEVBQUUsQ0FBQyxjQUFjLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFDNUIsR0FBRyxHQUFHLE1BQU0sa0JBQVEsRUFBRSxDQUFDO1FBQ3ZCLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbkIsb0JBQWMsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQ25DLFlBQVksRUFDWixLQUFLLEVBQUUsT0FBWSxFQUFFLEtBQWtCLEVBQWlCLEVBQUU7WUFDeEQsV0FBVyxHQUFHLEtBQUssQ0FBQztZQUNwQixPQUFPO1FBQ1QsQ0FBQyxDQUNGLENBQUM7SUFDSixDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyxhQUFhLEVBQUUsS0FBSyxJQUFJLEVBQUU7UUFD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QUNWLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDYixLQUFLLENBQUMsU0FBUyxFQUFFLFdBQVcsQ0FBQzthQUM3QixNQUFNLENBQUMsUUFBUSxFQUFFLFVBQVUsQ0FBQzthQUM1QixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDckMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztRQUNqRCxNQUFNLElBQUksR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1FBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLHFCQUFxQixDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDO1FBQ3JFLE1BQU0sVUFBVSxHQUFHLFdBQW9DLENBQUM7UUFDeEQsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxtQkFBbUIsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sZ0JBQWdCLEdBQUcsRUFBRSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekQsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLElBQUksRUFBRSxvQkFBb0IsQ0FBQyxDQUFDO1FBQ3pFLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxZQUFZLEVBQUUsb0JBQW9CLENBQUMsQ0FBQztJQUMzRSxDQUFDLENBQUMsQ0FBQztBQUVMLENBQUMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgY2hhaSBmcm9tICdjaGFpJztcbmltcG9ydCAqIGFzIGNvbmZpZyBmcm9tICdjb25maWcnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCAqIGFzIHJlcXVlc3QgZnJvbSAnc3VwZXJ0ZXN0JztcblxuaW1wb3J0IHsgc3RhcnRBcHAgfSBmcm9tICcuLi91dGlscy90ZXN0YXBwJztcbmltcG9ydCB7IE11bHRlckZpbGVzLCBQbGV4RGlzcGF0Y2hlciwgUGluZ1Jlc3BvbnNlIH0gZnJvbSAnLi4vLi4vbGliJztcblxuY29uc3QgYXNzZXJ0ID0gY2hhaS5hc3NlcnQ7XG5cbmRlc2NyaWJlKCdhcHAgc2V0dXAnLCAoKSA9PiB7XG5cbiAgY29uc3QgbG9nZGlyOiBzdHJpbmcgPSBjb25maWcuZ2V0KCdwbGV4LmxvZ2RpcicpO1xuICBjb25zdCB1cGxvYWRzOiBzdHJpbmcgPSBjb25maWcuZ2V0KCdwbGV4LnVwbG9hZHMnKTtcblxuICBiZWZvcmVBbGwoICgpID0+IHtcbiAgICBmcy5lbXB0eURpclN5bmMobG9nZGlyKTtcbiAgICBmcy5lbXB0eURpclN5bmModXBsb2Fkcyk7XG4gIH0pO1xuXG4gIGxldCBhcHA6IGV4cHJlc3MuRXhwcmVzcztcbiAgbGV0IGxhdGVzdEZpbGVzOiBNdWx0ZXJGaWxlcztcbiAgaXQoJ2FwcCBpbnN0YW5jZScsIGFzeW5jICgpID0+IHtcbiAgICBhcHAgPSBhd2FpdCBzdGFydEFwcCgpO1xuICAgIGFzc2VydC5leGlzdHMoYXBwKTtcbiAgICBQbGV4RGlzcGF0Y2hlci5nZXRJbnN0YW5jZSgpLnJlZ2lzdGVyKFxuICAgICAgJ21lZGlhLnBsYXknLCBcbiAgICAgIGFzeW5jIChwYXlsb2FkOiBhbnksIGZpbGVzOiBNdWx0ZXJGaWxlcyk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICBsYXRlc3RGaWxlcyA9IGZpbGVzO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG5cbiAgaXQoJy9waW5nIHJvdXRlJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApLmdldCgnL3BpbmcnKS5leHBlY3QoMjAwKTtcbiAgICBhc3NlcnQuZXhpc3RzKHJlc3BvbnNlLCAnZ290IGEgcmVzcG9uc2UnKTtcbiAgICBjb25zdCBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBhc3NlcnQuZXhpc3RzKGJvZHksICdnb3QgYSByZXNwb25zZSBib2R5Jyk7XG4gICAgY29uc3QgeyBuYW1lLCB2ZXJzaW9uLCBydW50aW1lIH0gPSAoYm9keSBhcyBQaW5nUmVzcG9uc2UpO1xuICAgIGFzc2VydC5lcXVhbChuYW1lLCAncGxleC1tb25pdG9yJywgJ25hbWUgbWF0Y2hlcycpO1xuICAgIGFzc2VydC5lcXVhbCh2ZXJzaW9uLCAnMC4xLjAnLCAndmVyc2lvbiBtYXRjaGVzJyk7XG4gICAgYXNzZXJ0LmV4aXN0cyhydW50aW1lKTtcbiAgfSk7XG5cbiAgaXQoJy9wbGV4IHJvdXRlICgyMDAgT0ssIGZhaWx1cmUgcmVzdWx0KScsIGFzeW5jICgpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJlcXVlc3QoYXBwKS5wb3N0KCcvcGxleCcpLmV4cGVjdCgyMDApO1xuICAgIGFzc2VydC5leGlzdHMocmVzcG9uc2UsICdnb3QgYSByZXNwb25zZSByZXN1bHQnKTtcbiAgICBjb25zdCBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBhc3NlcnQuZXhpc3RzKGJvZHksICdnb3QgYSByZXNwb25zZSBib2R5Jyk7XG4gICAgYXNzZXJ0LmVxdWFsKGJvZHkuc3RhdHVzLCAnZmFpbHVyZScsICdmYWlsdXJlIGRldGVjdGVkIGFzIGV4cGVjdGVkJyk7XG4gICAgYXNzZXJ0LmVxdWFsKGJvZHkucmVhc29uLCAnaW52YWxpZCBpbnB1dCcsICdmYWlsdXJlIHJlYXNvbicpO1xuICB9KTtcblxuICBpdCgnL3BsZXggcm91dGUgKDIwMCBPSywgc3VjY2VzcyByZXN1bHQpJywgYXN5bmMgKCkgPT4ge1xuICAgIGNvbnN0IHBsZXhSZXF1ZXN0ID0ge1xuICAgICAgcGF5bG9hZDogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBldmVudDogJ21lZGlhLnBsYXknLFxuICAgICAgICBtb2NrZGF0YToge1xuICAgICAgICAgIGlkZWE6ICdJIGdvdCBub3RoaW4nLCBcbiAgICAgICAgfSxcbiAgICAgIH0pLFxuICAgIH07IFxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVxdWVzdChhcHApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBvc3QoJy9wbGV4JylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc2VuZChwbGV4UmVxdWVzdClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZXhwZWN0KDIwMCk7XG4gICAgYXNzZXJ0LmV4aXN0cyhyZXNwb25zZSwgJ2dvdCBhIHJlc3BvbnNlIHJlc3VsdCcpO1xuICAgIGNvbnN0IGJvZHkgPSByZXNwb25zZS5ib2R5O1xuICAgIGFzc2VydC5leGlzdHMoYm9keSwgJ2dvdCBhIHJlc3BvbnNlIGJvZHknKTtcbiAgICBhc3NlcnQuZXF1YWwoYm9keS5zdGF0dXMsICdzdWNjZXNzJywgJ3N1Y2Nlc3MgZGV0ZWN0ZWQgYXMgZXhwZWN0ZWQnKTtcbiAgfSk7XG5cbiAgaXQoJy9wbGV4IHJvdXRlICgyMDAgT0ssIG11bHRpLXBhcnQgc3VjY2VzcyknLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcGxleFBheWxvYWQgPSBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGV2ZW50OiAnbWVkaWEucGxheScsXG4gICAgICAgIG1vY2tkYXRhOiB7XG4gICAgICAgICAgaWRlYTogJ0kgZ290IG5vdGhpbicsIFxuICAgICAgICB9LFxuICAgIH0pO1xuICAgIGNvbnN0IGZpbGVUb1NlbmQgPSAnLi90ZXN0L2ZpeHR1cmVzL3Rlc3RpbWFnZS5qcGcnO1xuICAgIGNvbnN0IGZpbGVTdGF0ID0gZnMuc3RhdFN5bmMoZmlsZVRvU2VuZCk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0KGFwcClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAucG9zdCgnL3BsZXgnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWVsZCgncGF5bG9hZCcsIHBsZXhQYXlsb2FkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRhY2goJ2ltYWdlMScsIGZpbGVUb1NlbmQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmV4cGVjdCgyMDApO1xuICAgIGFzc2VydC5leGlzdHMocmVzcG9uc2UsICdnb3QgYSByZXNwb25zZSByZXN1bHQnKTtcbiAgICBjb25zdCBib2R5ID0gcmVzcG9uc2UuYm9keTtcbiAgICBhc3NlcnQuZXhpc3RzKGJvZHksICdnb3QgYSByZXNwb25zZSBib2R5Jyk7XG4gICAgYXNzZXJ0LmVxdWFsKGJvZHkuc3RhdHVzLCAnc3VjY2VzcycsICdzdWNjZXNzIGRldGVjdGVkIGFzIGV4cGVjdGVkJyk7XG4gICAgY29uc3QgZmlsZXNBcnJheSA9IGxhdGVzdEZpbGVzIGFzIEV4cHJlc3MuTXVsdGVyLkZpbGVbXTtcbiAgICBhc3NlcnQuZXF1YWwoZmlsZXNBcnJheS5sZW5ndGgsIDEsICdvbmUgZmlsZSB1cGxvYWRlZCcpO1xuICAgIGNvbnN0IHVwbG9hZGVkRmlsZVN0YXQgPSBmcy5zdGF0U3luYyhmaWxlc0FycmF5WzBdLnBhdGgpO1xuICAgIGFzc2VydC5lcXVhbChmaWxlU3RhdC5zaXplLCB1cGxvYWRlZEZpbGVTdGF0LnNpemUsICd1cGxvYWRlZCBmaWxlIHNpemUnKTtcbiAgICBhc3NlcnQuZXF1YWwoZmlsZXNBcnJheVswXS5taW1ldHlwZSwgJ2ltYWdlL2pwZWcnLCAndXBsb2FkZWQgbWltZSB0eXBlJyk7XG4gIH0pO1xuICBcbn0pO1xuXG4iXX0=